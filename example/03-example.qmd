---
title: "Data wrangling"
---



```{r setup, include=FALSE}
# set knit options
knitr::opts_chunk$set(
  fig.width=9, 
  fig.height=5, 
  fig.retina=3,
  fig.align="center",
  out.width = "100%",
  cache = FALSE,
  echo = TRUE,
  message = FALSE, 
  warning = FALSE
)

# source in functions
source(here::here("R", "funcs.R"))

# libraries
library(juanr)
library(nycflights13)

```




# In-class example


Here's the code we'll be using in class:

* Day one: 👩‍💻 [04-wrangle-code.R](/files/example-scripts/04-wrangle-code.R)
* Day two: 👩‍💻 

Instructions: 

1. Download it and store it with the rest of your materials for this course. If simply clicking doesn't trigger download, you should right-click and select "save link as...". 

2. Upload to Posit Cloud





## Filtering

Often, we have a big dataset that covers lots of stuff (say, all flights coming out of NYC in 2013) but we're only interested in a *subset* of those things (say, flights that arrived late over that time period). The `filter()` function is a way to subset operations that match some rule or set of rules (e.g., rule = "flights that arrived late"). We define these rules using [logical operators](https://www.statmethods.net/management/operators.html).


### Examples


Let's load the libraries.

```{r, message=F,warning=F}
# libraries
library(tidyverse)
library(nycflights13)
```


Remember you can look at the data like this.

```{r, eval=F}
# look at the data
View(flights) # open data in viewer
?flights # read data documentation
```


Let's look at flights from February.

```{r}
# look at fights, but only from February
flights %>%
  filter(month == 2)
```


Let's look at flights on Valentine's Day.

```{r}
# now let's look at flights on Valentine's Day
flights %>%
  filter(month == 2) %>%
  filter(day == 14)
```


Let's try the OR logical operator by looking at flights going to ATL or SFO.

```{r}
# try one using text and the OR symbol
# look at fights going to ATL or SFO
flights %>%
  filter(dest == "ATL" | dest == "SFO")

```


Let's look at flights between noon and 5pm.

```{r}
# try one using greater than or less than
# look at flights departing between 12pm and 5pm
flights %>%
  filter(dep_time >= 1200) %>%
  filter(dep_time <= 1700)

```

Let's look at how many flights arrived late on christmas day.

```{r}
## how many flights arrived LATE, on christmas day?
late_xmas = flights %>%
  filter(arr_time > sched_arr_time) %>%
  filter(month == 12, day == 25)

```



<!-- ## World leaders -->


<!-- The first leader: -->

<!-- ```{r} -->
<!-- # do your work here -->
<!-- leader |>  -->
<!--   filter(country == "VNM", yr_office == 1, age == 11) -->
<!-- ``` -->


<!-- The second leaders: -->


<!-- ```{r} -->
<!-- leader |>  -->
<!--   filter(edu == "Graduate", year == 2015, yr_office == 16) -->
<!-- ``` -->


<!-- The third leaders: -->


<!-- ```{r} -->
<!-- leader |> filter(yr_office > 20) |>  -->
<!--   filter(rebel == 1) |>  -->
<!--   filter(will_force > 1.7) -->
<!-- ``` -->


<!-- ## bots -->


<!-- Note that you can use `distinct` to see all the values a variable takes on, like so: -->

<!-- ```{r} -->
<!-- bot |>  -->
<!--   distinct(religion) -->
<!-- ``` -->


<!-- Here is female voters, with post-graduate degrees, who voted for Trump: -->

<!-- ```{r} -->
<!-- bot |>  -->
<!--   filter(sex == "Female",  -->
<!--          votechoice == "Donald J. Trump (Republican)", -->
<!--          educ == "Post-grad") -->
<!-- ``` -->


<!-- ## Mutating -->


<!-- ### Climate -->


<!-- Here is how to do the climate example, -->

<!-- Graph 1: -->

<!-- ```{r} -->
<!-- sub_climate = climate |>  -->
<!--   filter(country == "Germany" | country == "United States" |  -->
<!--            country == "China" | country == "India") |>  -->
<!--   mutate(co2_capita = co2 / population) -->


<!-- ggplot(data = sub_climate, aes(x = year, y = co2, color = country)) + geom_line() -->
<!-- ``` -->


<!-- Graph 2: -->

<!-- ```{r} -->
<!-- ggplot(data = sub_climate, aes(x = year, y = co2_capita, color = country)) + geom_line() -->
<!-- ``` -->



<!-- ### Elections -->


<!-- Here is how we classify elections based on who won: -->

<!-- ```{r} -->
<!-- cat_elections = elections |>  -->
<!--   mutate(who_won = case_when(per_dem_2012 > per_gop_2012 & per_dem_2016 > per_gop_2016 ~ "blue", -->
<!--                              per_dem_2012 < per_gop_2012 & per_dem_2016 < per_gop_2016 ~ "red", -->
<!--                              per_dem_2012 > per_gop_2012 & per_dem_2016 < per_gop_2016 ~ "flipped red", -->
<!--                              per_dem_2012 < per_gop_2012 & per_dem_2016 > per_gop_2016 ~ "flipped blue")) -->


<!-- ggplot(cat_elections, aes(y = who_won, x = hh_income)) + geom_boxplot() -->
<!-- ``` -->

