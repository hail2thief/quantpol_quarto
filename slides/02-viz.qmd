---
title: "Data visualization I"
subtitle: "POL51"
author: "Juan F. Tellez"
institute: "University of California, Davis"
date: today
date-format: long
format:
  revealjs: 
    slide-number: true
    height: 900
    width: 1600
    code-line-numbers: true
    smooth-scrawl: true
    theme: [simple, html/custom.scss]
    incremental: true
    title-slide-attributes:
      data-background-image: img/dubois-spiral-2.png
      data-background-size: contain
      data-background-position: right
      data-background-color: "#dc354a"
---


```{r setup, include=FALSE}
# set knit options
knitr::opts_chunk$set(
  fig.width=9, 
  fig.height=5, 
  fig.retina=3,
  fig.align="center",
  out.width = "100%",
  cache = FALSE,
  echo = FALSE,
  message = FALSE, 
  warning = FALSE
)

# libraries
library(gapminder)
library(socviz)

# source
source(here::here("R/funcs.R"))

```


# Plan for today {.center background-color="#dc354a"}


- A quick tour of RStudio
- Why visualize data?
- The grammar of graphics




# A quick tour of RStudio {background-color="#dc354a"}

::: {.notes}
Show the UN voting data again, code in one corner, plots in the other, goes to console
:::




## Tortured metaphor 1: R as a car


```{r}
knitr::include_graphics("img/r-car.png")
```


::: {.notes}
Two programs: R + RStudio
:::



## Tortured metaphor 1: R as a car


```{r}
knitr::include_graphics("img/r-icons.png")
```




## Tortured metaphor 2: RStudio as a kitchen


```{r}
knitr::include_graphics("img/cooking-metaphor.jpeg")
```



## Tortured metaphor 2: RStudio as a kitchen


```{r}
knitr::include_graphics("img/rstudio-cook.png")
```


## Tortured metaphor 3: RStudio as a phone


Packages are where most of our **functions** and **data** live


```{r}
knitr::include_graphics("img/r-apps.png")
```

## Installing packages

Check out [my guide](https://quantpol.juanftellez.com/reference/install/#install-cran-packages)


Or type this into the console and hit return/enter (note the quotation marks!):


```{r,echo=TRUE,eval=FALSE}
install.packages("Name of the package")
```



# Why **visualize** data? {background-color="#dc354a"}

---


## WEB Dubois


::: columns
::: {.column width="50%"}
(1868 - 1963)

- American sociologist

- historian

- civil rights advocate

- Data visualization specialist?    
:::

::: {.column width="50%"}
```{r}
knitr::include_graphics("img/dubois.jpeg")
```
:::
:::

---



```{r}
knitr::include_graphics("img/dubois-income.jpeg")
```


---


```{r}
knitr::include_graphics("img/dubois-area.jpeg")
```


---


```{r}
knitr::include_graphics("img/dubois-graphs.jpeg")
```


# These are *hand-drawn* {.center background-color="#dc354a"}


## Why visualize data? {.center}


- For better or worse, data carries **weight**

- **Visualizing** data is an effective way to convince, argue, tell stories (and *mislead*)

- Graphs, maps, diagrams and other visuals are everywhere



## Dataviz to inform


```{r,out.width="60%"}
knitr::include_graphics("img/nyt-good.png")
```


## Dataviz to mislead

```{r,out.width="40%"}
knitr::include_graphics("img/gun-bad.png")
```


## Inform? or mislead?


```{r}
gap_10 = gapminder |> 
  filter(year == max(year)) |> 
  filter(continent == "Americas")

 
p1 = ggplot(gap_10, aes(y = reorder(country, lifeExp), x = lifeExp)) + 
  geom_col(color = "white", fill = red, alpha = .8) +
  labs(x = NULL, 
       y = NULL,
       title = "Barplot")

p2 = ggplot(gap_10, aes(y = reorder(country, lifeExp), x = lifeExp)) + 
  geom_point(color = red, size = 3, alpha = .8) + 
  labs(x = NULL,
       y = NULL,
       title = "Cleveland dot plot")

p1 + p2 + plot_annotation(title = "Life expectancy in the Americas (2007)",
                          theme = theme(plot.title = element_text(hjust = 0.5)))
```



# Making graphs in `R` {background-color="#dc354a"}


## The Gapminder dataset


```{r}
gapminder |> 
  slice(1:5) |> 
  kbl(digits = 0) %>% 
  kable_styling(bootstrap_options = c("striped", "hover"))
```



## Rows are observations


```{r}
gapminder |> 
  slice(1:5) |> 
  kbl(digits = 0) %>% 
  kable_styling(bootstrap_options = c("striped", "hover")) |> 
  row_spec(row = 1, bold = TRUE, background = yellow)
```

In a dataset, **rows** are **observations**

. . .

The data we **observe** for *Afghanistan* in the year *1952*



## Rows are observations


```{r}
gss_sm |> 
  select(id, age, degree, race, sex) |> 
  slice(1:5) |> 
  kbl(digits = 0) %>% 
  kable_styling(bootstrap_options = c("striped", "hover")) |> 
  row_spec(row = 3, bold = TRUE, background = yellow)
```

In **survey** data, an observation is typically a **person** who took the survey (a *respondent*)


## Columns are variables


```{r}
gapminder |> 
  slice(1:5) |> 
  kbl(digits = 0) %>% 
  kable_styling(bootstrap_options = c("striped", "hover")) |> 
  column_spec(column = 4, bold = TRUE, background = yellow)
```

In a dataset, **columns** are **variables**

. . .

Life expectancy and GDP per capita are some of the **variables** in our data




## The final graph


```{r,echo = FALSE}
# subset data to focus on 2007
gap_07 = 
  gapminder %>% 
  filter(year == 2007)


# calculate average life span by year
life_yr = 
  gapminder %>% 
  select(year, lifeExp) %>% 
  group_by(year) %>% 
  summarise(avg_yrs = mean(lifeExp))

# calculate average life expectancy by continent
life_region = 
  gap_07 %>% 
  group_by(continent) %>% 
  summarise(avg_yrs = mean(lifeExp))

# calculate average life expectancy by continent-year
life_region_yr = 
  gapminder %>% 
  group_by(continent, year) %>% 
  summarise(avg_yrs = mean(lifeExp))

# plot
ggplot(gap_07, aes(x = gdpPercap, y = lifeExp, 
                      color = continent, 
                      size = pop)) + 
  geom_point() + 
  labs(x = "GDP per capita ($USD, inflation-adjusted)", 
       y = "Life expectancy (in years)", 
       title = "Wealth and Health Around the World", 
       subtitle = "Data from 2007. Source: gapminder package.",
       color = NULL, size = "Population") + 
  scale_size_continuous(labels = scales::comma)
```

::: {.notes}
There are four variables on this graph. What are they?
:::


## The **grammar** of graphics {.center}

. . .

Graphs have an internal logic, or **grammar** that connects data to visuals   

. . .

**Data** = variables in a dataset

. . .


**Aesthetic** = visual property of a graph (position, shape, color, etc.)

. . .

**Geometry** = representation of an aesthetic (point, line, text, etc.)


## Mapping data to aesthetics



```{r}
df = tribble(~Data, ~Aesthetic, ~Geometry, 
             "GDP per capita", "Position(x-axis)", "Point", 
             "Life expectancy", "Position (y-axis)", "Point", 
             "Continent", "Color", "Point", 
             "Population", "Size", "Point")
knitr::kable(df)
```



1. Take the **data**, 

2. map it onto an **aesthetic**, 

3. and visualize it with a **geometry**



## In R


```{r}
df = tribble(~`Data`, ~`aes()`, ~`geom_`, 
             "gdpPercap", "x", "geom_point()", 
             "lifeExp", "y", "geom_point()", 
             "continent", "color", "geom_point()", 
             "pop", "size", "geom_point()")
knitr::kable(df)
```

Use the variable names *exactly* as they appear in the data, map them onto the *exact* function names in R


## `ggplot()`: our first function ðŸ˜¢

```{r,echo = TRUE}
#| code-line-numbers: "1"
ggplot()
```

::: {.notes}
don't fret; You will not memorize these as they appear on screen
:::


## `ggplot`: specify the data

```{r, echo = TRUE}
ggplot(data = gap_07)
```


## Use `aes()` to map variables to aesthetics

```{r,echo=TRUE}
ggplot(data = gap_07, aes(x = gdpPercap, y = lifeExp))
```


## add geometries and layers using `+`

```{r,echo=TRUE, out.width="80%"}
ggplot(data = gap_07, aes(x = gdpPercap, y = lifeExp)) + geom_point()
```


## mapping population to size in `aes()`


```{r,echo=TRUE, out.width="80%"}
ggplot(data = gap_07, aes(x = gdpPercap, y = lifeExp, size = pop)) + 
  geom_point()
```




## mapping continent to color in `aes()`

```{r,echo=TRUE, out.width="80%"}
ggplot(data = gap_07, aes(x = gdpPercap, y = lifeExp, size = pop, color = continent)) + 
  geom_point()
```



## Other layers: add the missing titles with `labs()`


```{r,echo = TRUE, out.width="70%"}
ggplot(data = gap_07, aes(x = gdpPercap, y = lifeExp, size = pop, color = continent)) + 
  geom_point() + labs(x = "GDP per capita", y = "Life expectancy", 
       title = "Global wealth and health in 2007", size = "Population",
       color = "")
```

Notice that text is placed within **quotation marks**!



## Other layers: add a theme


```{r,echo = TRUE, out.width="60%"}
ggplot(data = gap_07, aes(x = gdpPercap, y = lifeExp, size = pop, color = continent)) + 
  geom_point() + labs(x = "GDP per capita", y = "Life expectancy", 
       title = "Global wealth and health in 2007") + 
  theme_bw()
```


There are many more themes, [here are a few](https://ggplot2.tidyverse.org/reference/ggtheme.html)



## The final formula


```{r,echo = TRUE, eval = FALSE}
ggplot(data = gap_07, aes(x = gdpPercap, y = lifeExp, 
                          size = pop, color = continent)) +
  geom_point() + labs(x = "GDP per capita", y = "Life expectancy", 
       title = "Global wealth and health in 2007") +
  theme_bw()
```




1. Tell `ggplot()` the data we want to plot

2. Map all variables onto aesthetics within `aes()`

3. Add layers like `geom_point()` and `theme_bw()` using `+`



## What's that country way out on the bottom right? 


```{r,echo = FALSE}
ggplot(data = gap_07, aes(x = gdpPercap, y = lifeExp, 
                          size = pop, color = continent)) +
  geom_point() + 
  labs(x = "GDP per capita", y = "Life expectancy", 
       title = "Global wealth and health in 2007") + 
  geom_label_repel(data = filter(gap_07, country == "Gabon"), 
                   aes(label = "???"), color = red, 
                   nudge_x = 5e3, size = 4, fontface = "bold")
```



## ðŸš¨ Your turn: try labelling the points ðŸš¨



1. Add labels to each point by mapping country names onto the `label` aesthetic within `aes()`

2. Add `geom_text` layer to your plot to plot the names


```{r}
countdown::countdown(minutes = 5L)
```


## The basic plot

```{r, echo = TRUE,out.width="70%"}
ggplot(data = gap_07, aes(x = gdpPercap, y = lifeExp, size = pop, 
                          color = continent)) + 
  geom_point()
```


## Map country names to label aesthetic

```{r, echo = TRUE,out.width="70%"}
ggplot(data = gap_07, aes(x = gdpPercap, y = lifeExp, size = pop, 
                          color = continent, label = country)) + 
  geom_point()
```


## Plot the labels

```{r, echo = TRUE,out.width="70%"}
ggplot(data = gap_07, aes(x = gdpPercap, y = lifeExp, size = pop, 
                          color = continent, label = country)) + 
  geom_point() + 
  geom_text() 
```


## What did we do?

```{r}
df = tribble(~Data, ~Aesthetic, ~Geometry, 
             "gdpPercap", "x", "geom_point()", 
             "lifeExp", "y", "geom_point()", 
             "continent", "color", "geom_point()", 
             "pop", "size", "geom_point()", 
             "country", "label", "geom_text()")

kbl(df) %>% 
  kable_styling(bootstrap_options = c("striped", "hover")) |> 
  row_spec(row = 5, bold = TRUE, background = yellow)
```



Take your *data*, map it onto an *aesthetic*, represent with a *geometry*



## ðŸ‡ºðŸ‡¸ The presidents ðŸ‡ºðŸ‡¸


```{r}
elections_historic %>% 
  select(year, winner, win_party, ec_pct, popular_pct, two_term) %>% 
  slice_head(n = 4) %>% 
  knitr::kable(caption = "Sample of presidential elections", digits = 2)
```



## ðŸš¨ Your turn ðŸš¨



1. Make a plot of presidential election results using the `elections_historic` dataset

2. % of popular vote (x-axis, `popular_pct`) and % of electoral college vote (y-axis, `ec_pct`)

3. map the winner's party to the `color` aesthetic, whether or not president served two terms to `shape`, and add labels to each point (use `winner_label`)



```{r}
countdown::countdown(minutes = 5L)
```


## US Presidents



```{r, echo = FALSE}
ggplot(elections_historic, aes(x = popular_pct, y = ec_pct, label = winner_label,
                               color = win_party, shape = two_term, 
                               label = winner_label)) + 
  geom_hline(yintercept = 0.5, size = 1.4, color = "gray80") +
  geom_vline(xintercept = 0.5, size = 1.4, color = "gray80") +
  geom_point() +  
  geom_text_repel() + 
  labs(x = "Percent of popular vote", 
       y = "Percent of Electoral College vote", 
       title = "Presidential Elections: Popular & Electoral College Margins",
       subtitle = "1824-2016", color = NULL, size = NULL) + 
  scale_y_continuous(labels = scales::percent) + 
  scale_x_continuous(labels = scales::percent) + 
  scale_color_manual(values = c(yellow, red, blue, "gray")) + 
  theme(legend.position = "none") 
```


::: {.notes}
What's going on here?
:::



## What did we do?

```{r}
df = tribble(~Data, ~Aesthetic, ~Geometry, 
             "popular_pct", "x", "geom_point()", 
             "ec_pct", "y", "geom_point()", 
             "win_party", "color", "geom_point()", 
             "two_term", "shape", "geom_point()",
             "winner_label", "label", "geom_text()")
knitr::kable(df)
```



Take your *data*, map it onto an *aesthetic*, represent with a *geometry*

