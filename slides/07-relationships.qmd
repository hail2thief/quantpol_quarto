---
title: "Relationships II"
subtitle: "POL51"
author: "Juan F. Tellez"
institute: "University of California, Davis"
date: today
date-format: long
format:
  revealjs: 
    html-math-method: mathjax
    chalkboard: true
    slide-number: true
    height: 900
    width: 1600
    code-line-numbers: true
    smooth-scrawl: true
    theme: [simple, html/custom.scss]
    incremental: true
    title-slide-attributes:
      data-background-image: img/dubois-spiral-2.png
      data-background-size: contain
      data-background-position: right
      data-background-color: "#dc354a"
---


```{r setup, include=FALSE}
# set knit options
knitr::opts_chunk$set(
  fig.width=9, 
  fig.height=5, 
  fig.retina=3,
  fig.align="center",
  out.width = "100%",
  cache = FALSE,
  echo = FALSE,
  message = FALSE, 
  warning = FALSE
)

# libraries
library(gapminder)
library(socviz)
library(juanr)
library(fivethirtyeight)

# source
source(here::here("R/funcs.R"))


```


# Plan for today {.center background-color="#dc354a"}

. . .


Comparing across groups


. . .


Dummy variables

. . .


Summarizing categories



# Comparing across groups {background-color="#dc354a"}

## The feeling thermometer


We can use `summarise()` to measure average support for specific groups:

```{r, echo = TRUE}
therm %>% 
  summarise(avg_police = mean(ft_police, na.rm = TRUE)) 
```




## Feeling thermometer


We can *compare* where support is highest and lowest:

```{r, echo = TRUE}
therm %>% 
  summarise(avg_police = mean(ft_police, na.rm = TRUE), 
            avg_muslim = mean(ft_muslim, na.rm = TRUE), 
            avg_white = mean(ft_white, na.rm = TRUE), 
            avg_immig = mean(ft_immig, na.rm = TRUE), 
            avg_fem = mean(ft_fem, na.rm = TRUE), 
            avg_black = mean(ft_black, na.rm = TRUE)) 
```

::: {.notes}
patterns
:::



## Breaking down support

We can look for patterns by using `group_by()` to separate average support *by* respondent characteristics:

. . .


```{r, echo = TRUE}
therm %>% 
  group_by(party_id) %>% 
  summarise(avg_police = mean(ft_police, na.rm = TRUE), 
            avg_muslim = mean(ft_muslim, na.rm = TRUE), 
            avg_white = mean(ft_white, na.rm = TRUE), 
            avg_immig = mean(ft_immig, na.rm = TRUE), 
            avg_fem = mean(ft_fem, na.rm = TRUE), 
            avg_black = mean(ft_black, na.rm = TRUE))
```


::: {.notes}
take code and iteratively change it
:::



## Breaking down support


We can use `filter()` to focus our comparison on fewer categories: 

. . .


```{r, echo = TRUE}
therm_by_party = therm %>% 
  filter(party_id %in% c("Democrat", "Republican")) %>% 
  group_by(party_id) %>% 
  summarise(avg_police = mean(ft_police, na.rm = TRUE), 
            avg_muslim = mean(ft_muslim, na.rm = TRUE), 
            avg_white = mean(ft_white, na.rm = TRUE), 
            avg_immig = mean(ft_immig, na.rm = TRUE), 
            avg_fem = mean(ft_fem, na.rm = TRUE), 
            avg_black = mean(ft_black, na.rm = TRUE))
therm_by_party
```




::: {.notes}
Where are the biggest partisan gaps? 
What's going on with immigrants? Is this really an apples-to-apples comparison?
:::



## The immigration gap

. . .

What explains this gap? How much is it about each party's **ideology** and how much is about **who** is in each party?


. . .


Immigrants in the USA are more likely to **identify** as Democrat

. . .

How much of the difference we are observing across parties solely about **parties** and how much is it about *demographic* differences?

. . .

It might be, for instance, that the attitudes of non-migrants don't differ much across parties

. . .

that is, the big gap we see is all because immigrants are *both* more likely to be Democrats *and* have stronger views of own community



## Making sense of the immigration gap



We want an **apples to apples** comparison: White Dems vs. White Reps, Asian Dems vs. Asian Reps, and so on

. . .


We can "test" this concern by breaking the data down further, by race: 

. . .



```{r, echo = TRUE}
therm %>% 
  filter(party_id %in% c("Democrat", "Republican")) %>%
  group_by(party_id, race) %>%
  summarise(avg_imm = mean(ft_immig, na.rm = TRUE))
```


## Making sense of the immigration gap


We can filter to focus on fewer races:

. . .

```{r, echo = TRUE}
therm %>% 
  filter(party_id %in% c("Democrat", "Republican")) %>%
  filter(race %in% c("White", "Black", "Hispanic", "Asian")) |> 
  group_by(party_id, race) %>%
  summarise(avg_imm = mean(ft_immig, na.rm = TRUE))
```


## Visualizing the pattern

We can create a new object to make a nice plot:

```{r, echo = TRUE}
therm_party_immig = therm %>% 
  filter(party_id %in% c("Democrat", "Republican")) %>%
  filter(race %in% c("White", "Black", "Hispanic", "Asian")) |> 
  group_by(party_id, race) %>%
  summarise(avg_imm = mean(ft_immig, na.rm = TRUE))
```



## The immigration attitudes gap


```{r,echo = FALSE, out.width="100%"}
ggplot(therm_party_immig, aes(y = avg_imm, 
                              x = race, fill = party_id)) + 
  geom_col(position = "dodge") + 
  labs(y = "Party Identification", x = "Average thermometer level\nfor immigrants", 
       fill = "Respondent race:") + 
  theme(legend.position = "none") + 
  geom_label(aes(label = party_id), position = position_dodge(1), color = "white") + 
  scale_fill_manual(values = c(blue, red))
```

::: {.notes}
comparing apples to apples, the gap persists
:::




# Big picture


The immigration gap persists (though smaller), even comparing non-immigrants against non-immigrants and immigrants against immigrants

. . .


This analysis is a way of **accounting** for differences in groups (Democrats versus Republicans); it's closer to an "apples to apples" comparison


. . .


Big differences **across groups** should raise eyebrows; what's going on here? 

. . .

We can break the data down further to see what's going on beneath the surface


## Non-differences can be surprsing too


```{r, echo = TRUE}
therm %>% 
  summarise(avg_dems = mean(ft_dem, na.rm = TRUE), 
            avg_reps = mean(ft_rep, na.rm = TRUE))
```

. . .

Pretty neutral feelings; mass **polarization** is dead!



## Oh...

Breaking down data says something different

. . .

```{r, echo = TRUE}
therm %>% 
  group_by(party_id) %>% #<<
  summarise(dems = mean(ft_dem, na.rm = TRUE), 
            reps = mean(ft_rep, na.rm = TRUE))
```



## Negative polarization

```{r}
therm %>% 
  filter(party_id %in% c("Democrat", "Republican")) %>% 
  select(party_id, ft_dem, ft_rep) %>% 
  pivot_longer(-party_id) %>% 
  ggplot(aes(x = value, y = name, fill = party_id)) + 
  ggridges::geom_density_ridges(color = "white", alpha = .8) + 
  theme_nice() + 
  scale_y_discrete(labels = c("Democrats", "Republicans")) + 
  theme(legend.position = "top") + 
  labs(y = "How respondents feel about...", 
       x = "Thermometer rating", fill = "Respondent is a...") + 
  scale_fill_brewer(palette = "Set1", direction = -1)
```


# Dummy variables {background-color="#dc354a"}



## Dummy variables

Often, *categorical* variables are coded 0/1 to represent "yes/no" or "presence/absence"

. . .

```{r}
leader |> 
  select(country, leader, mil_service, combat, combat) |> 
  sample_n(10) |> 
  kbl(caption = "sample from leaders dataset")
```


## Dummy proportions


Dummy variables are useful for lots of reasons

. . .

One is that when you take the average of a dummy variable you get a **proportion**

. . .

Coffee today? 1, 0, 0, 0, 1

. . .


Average of coffee = $\frac{1 + 0 + 0 + 0 + 1}{5} = .40$

. . .

We can think about that proportion as a **probability** or **likelihood**

. . .

What is the **probability** a random student in class has had coffee? 2/5 = 40%



## Dummy variables


When you take the average of a dummy variable you get a proportion:

```{r, echo = TRUE}
leader %>% 
  summarise(combat = mean(combat, na.rm = TRUE)) 
```

Approximately 24% of world leaders have combat experience, or

. . .

there's a 24% **chance** a randomly selected leader has combat experience




## Dummy variables


Like with anything else, we can take averages by groups

. . .

For example, combat experience by country

. . .


```{r,echo = TRUE}
leader %>% 
  group_by(country) %>%
  summarise(combat = mean(combat, na.rm = TRUE)) |> 
  arrange(desc(combat))
```


Note that `arrange(desc(variable))` arranges the dataset in descending order



## Dummy variables


We can store as an object, to make a plot:

```{r,echo=TRUE}
#| output-location: column
combat_country = leader %>% 
  group_by(country) %>%
  # proportion who've seen combat
  summarise(combat = mean(combat, na.rm = TRUE)) |> 
  # subset to just the top 10 in terms of combat experience
  slice_max(order_by = combat, n = 10)

ggplot(combat_country, aes(y = reorder(country, combat),
                           x = combat)) + 
  geom_col()
```


## ðŸš¨ Your turn: ðŸŽ¨ Bob Ross ðŸŽ¨ ðŸš¨



```{r}
knitr::kable(head(bob_ross))
```




## ðŸš¨ Your turn: ðŸŽ¨ Bob Ross ðŸŽ¨ ðŸš¨

Using the `bob_ross` data from `fivethirtyeight` package


1. How likely was Bob Ross to include a happy little `tree` in one of his paintings? 

2. How has the frequency with which Bob Ross included `clouds` in his paintings changed across the show's seasons? Make a time series to illustrate. 

3. If there is a `mountain` in a Bob Ross painting, how likely is it that mountain is *snowy* (`snowy_mountain`)?

4. How much more likely was Steve Ross (`steve`) to paint a lake (`lake`) than his dad? 




```{r}
countdown::countdown(minutes = 10L)
```



# Analyzing categorical data {background-color="#dc354a"}


## Analyzing categorical data

. . .

Some variables have values that are **categories** (race, sex, etc.)

. . .

Can't take the **mean** of a category!

. . .

But we *can* look at the *proportions* of observations in each category, and look for patterns there



## Pokemon types

How many Pokemon are there of each type? What are the most and least common types?


```{r}
pokemon %>% 
  select(name, type1) %>% 
  sample_n(7) %>% 
  knitr::kable()
```



## Counting categories


We can use a new function `tally()`, in combination with `group_by()`, to **count** how many observations are in each category:

```{r, echo = TRUE}
pokemon
```




## Counting categories


We can use a new function `tally()`, in combination with `group_by()`, to **count** how many observations are in each category:

```{r, echo = TRUE}
pokemon %>% 
  group_by(type1) 
```



## Counting categories


We can use a new function `tally()`, in combination with `group_by()`, to **count** how many observations are in each category:


```{r, echo = TRUE}
pokemon %>% 
  group_by(type1) %>% 
  tally() 
```





## From counts to percents


We can can then use `mutate()` to calculate the **percent** in each group:


```{r, echo = TRUE}
pokemon %>% 
  group_by(type1) %>% 
  tally() %>% 
  mutate(percent = n / sum(n) * 100) 
```



::: {.notes}
stop to show the n/sum(n)
:::




## group_by + tally()


We can then store as object for plotting:

```{r, echo = TRUE}
type_pct = pokemon %>% 
  group_by(type1) %>% 
  tally() %>% 
  mutate(percent = n/sum(n) * 100)
```



## group_by + tally()


We can then store as object for plotting:

```{r, echo = TRUE, out.width="80%"}
ggplot(type_pct, aes(y = reorder(type1, percent), 
                     x = percent)) + 
  geom_col(color = "white", fill = "darkblue") + 
  # suppress legend
  theme(legend.position = "none")
```




## ðŸš¨ Your turn: ðŸ’º Flying etiquette ðŸ’º ðŸš¨

A survey of what's rude to do on a plane: 

. . .



```{r}
flying %>% 
  select(-respondent_id) %>% 
  drop_na(gender) |> 
  sample_n(10) |> 
  kbl(caption = "Sample from the flying dataset")
```





## ðŸš¨ Your turn: ðŸ’º flying etiquette ðŸ’º ðŸš¨

Using the `flying` data from `fivethirtyeight`


1. In a row of three seats, who should get to use the middle arm rest (`two_arm_rests`)? Make a barplot of the *percent* of respondents who gave each answer. 

2. In general, is it rude to knowingly bring unruly children on a plane? Make a barplot of the *percent* who gave each answer, but **separated by** whether the respondent has a kid or not. 

3. Make a barplot of responses to an etiquette dilemma of your liking. Bonus points if you break it down by a respondent characteristic. 




```{r}
countdown::countdown(minutes = 15L)
```
