---
title: "Data wrangling II"
subtitle: "POL51"
format: 
  clean-revealjs:
    incremental: true
html-math-method:
  method: mathjax
  url: "https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"
author:
  - name: Juan Tellez
    email: jftellez@ucdavis.edu
    affiliations: UC Davis
date: last-modified
title-slide-attributes:
  data-background-image: ../img/dubois-spiral-2.png
  data-background-size: contain
  data-background-position: right
---


```{r setup, include=FALSE}
# set knit options
knitr::opts_chunk$set(
  fig.width=9, 
  fig.height=5, 
  fig.retina=3,
  fig.align="center",
  tidy = TRUE,
  tidy.opts = list(width.cutoff = 80),
  out.width = "100%",
  cache = FALSE,
  echo = FALSE,
  message = FALSE, 
  warning = FALSE
)


# source
source(here::here("R/funcs.R"))

# libraries
library(juanr)
library(socviz)
library(gapminder)

```


# Get ready {.center}

- Boot up Posit Cloud
- Download the script for today's examples
    - Schedule  ➡️ Example ➡️ Today
- Upload the script to Posit Cloud



# Plan for today {.center background-color="`r full`"}


. . .


Making amends + objects review


. . .

Mutating new variables

. . .

Creating categories




# Weekly check-in {.center background-color="`r full`"}

So far, you: 

. . .

somehow do not know how to make every graph from scratch based solely off memory

. . .

are confused about errors you are seeing for the first time in a computer program you've never used before

. . .

are unable to re-type all the code I am presenting on slides into your notes at what would be a rate on par with a professional court stenographer


# Weekly check-in {.center background-color="`r full`"}


You are *confused* and *unsure* of yourselves

. . .

But you are doing **well**

. . .

You've only been coding for two weeks

. . .

You just need to know how to piece together answers from notes + slides

. . .

You will **slowly** get better at coding, and dealing with errors (be patient!)



# Back to objects {.center background-color="`r full`"}


## Using objects


```{r, echo = TRUE}
ggplot(gapminder, aes(x = gdpPercap, y = lifeExp)) + geom_point()
```

. . .

What if I wanted to make this same plot, but only looking at countries in **Asia**?



## Subset to Asia


I can use `filter()` to subset the data to Asia, store it as a new object `gap_asia`, and use that new object to make a plot

. . .

```{r, echo = TRUE}
gap_asia = gapminder |> filter(continent == "Asia")

ggplot(gap_asia, aes(x = gdpPercap, y = lifeExp)) + geom_point()
```



## Using the new object


Notice how I need to **use the new object**

the original `gapminder` does not have what I want


::: columns
::: {.column width="50%"}
::: {.fragment}
```{r, echo = TRUE}
ggplot(gap_asia, aes(x = gdpPercap, 
                       y = lifeExp)) + 
  geom_point()
```
:::

:::

::: {.column width="50%"}
::: {.fragment}
```{r, echo = TRUE}
ggplot(gapminder, aes(x = gdpPercap, 
                      y = lifeExp)) + 
  geom_point()
```
:::
:::
:::



## filter() and variables types


Filtering requires knowing the **type** of variable you are working with

. . .

Numerical variables do not use quotes

```{r, echo = TRUE, eval = FALSE}
gapminder |> filter(year > 2000)
```

. . .

Categorical variables use quotes, and spelling must be *exact*


✅

```{r, echo = TRUE, eval = FALSE}
gapminder |> filter(continent == "Asia")
```

. . .

❌
```{r, echo = TRUE, eval = FALSE}
gapminder |> filter(continent == "asia")
```


## Logical variables


`TRUE/FALSE` variables are all-caps, no quotes


```{r, echo = TRUE, eval = FALSE}
apples |> filter(sweet == TRUE)
```



## What values does a variable take on? {visibility="hidden"}


To figure out what **values** a variable can take on, you can use `distinct()`

. . .


```{r, echo = TRUE}
bot |> 
  distinct(religion)
```



# Mutating variables {.center background-color="`r full`"}


## Homicides in 2019


```{r}
df = read_rds(here("data", "murder_wiki_2019.rds"))

murder_set = df |> 
  select(state, city, population, murder_total)

murder_set |> 
  head() |> 
  kable(digits = 0) |> 
  kable_styling(bootstrap_options = "striped")
```



## Most violent cities in America?


```{r}
df |> 
  slice_max(order_by = murder_total, n = 10) |> 
  ggplot(aes(y = reorder(paste0(city, ", ", state), murder_total), 
             x = murder_total)) + 
  geom_col(color = "white", fill = red) + 
  labs(x = "Murder and nonnegligent manslaughter", y = NULL)
```


## Fewer deaths in towns with less people



```{r}
df |> 
  ggplot(aes(x = log(population), y = murder_total)) + 
  geom_point(size = 2, color = blue) + 
  labs(x = "Population (logged)", y = "Murder and nonnegligent manslaughter")
```


## Normalizing variables {.center}


To compare across cities we need to **take into account** differences in population

. . .

We want to know how many murders have taken place (or drug overdoses, or crimes, or COVID cases, or...) per person in the city (**per capita**)

. . .

This is called **normalizing** a variable; *changing* it so that we can make units more *comparable*



## Murder **rate**

In math terms this is just dividing the number of murders by population: 

$Murders_{capita} = \frac{Murders}{Population}$ = "how many murders per person"


. . .

<br>

Since this fraction is *tiny*, the convention is to multiply by a number that makes sense


. . .


for the population of a city, say 100,000 people


. . .


$Murders_{per 100k} = \frac{Murders}{Population} \times 100,000$ = "how many murders per 100,000 people"



## Comparing murder *rates*


If we look at murder **rates**, the picture changes: 


```{r}
df |> 
  slice_max(order_by = murder_rate, n = 10) |> 
  ggplot(aes(y = reorder(paste0(city, ", ", state), murder_rate), 
             x = murder_rate)) + 
  geom_col(color = "white", fill = red) + 
  labs(x = "Murder and nonnegligent manslaughter rate per 100,000", y = NULL)
```



## Making new variables with `mutate()`



`mutate()` **adds** new variables to data


```{r, out.width="60%"}
knitr::include_graphics(here::here("slides/img/mutate.png"))
```


## Using mutate


```{r, echo = TRUE}
murder_set
```

::: {.callout-note}
`murder_set` is the name of the homicide data
:::



## Using mutate


```{r, echo = TRUE}
murder_set |> 
  mutate()
```


## Using mutate


```{r, echo = TRUE}
murder_set |> 
  mutate(murder_capita = murder_total / population)
```


Notice that I *named* a new variable, `murder_capita`

::: {.notes}
notice tiny proportion
:::


## Using mutate


```{r, echo = TRUE}
murder_set |> 
  mutate(murder_capita = murder_total / population, 
         murder_rate = murder_capita * 100000)
```


Notice the new **columns**


## Forgetting to store


If you don't store your changes, they will melt away, like tears in the rain

```{r, echo = TRUE, eval = FALSE}
murder_set |> 
  mutate(murder_capita = murder_total / population, 
         murder_rate = murder_capita * 100000)
```

. . .

```{r, echo = TRUE}
murder_set
```



## New object, or overwite the old one?

. . .

When you `mutate()`, you should **overwrite** the original data by naming the "new" object the same as the "old" one


```{r, echo = TRUE, eval=TRUE}
murder_set = murder_set |>
  mutate(murder_capita = murder_total / population, 
         murder_rate = murder_capita * 100000)
```


. . .


This way, you **add** columns to your original dataset


```{r, echo = TRUE}
murder_set
```


## New object, or overwite the old one?


When we `filter()`, we want to create a **new** object

. . .

If we overwrite the original object, we **lose the original data**


❌

```{r, echo = TRUE, eval = TRUE}
gapminder = gapminder |> 
  filter(continent == "Africa")
gapminder
```


## New object, or overwite the old one?


Make a new object instead:

✅

```{r, echo = TRUE, eval = TRUE}
gap_africa = gapminder |> 
  filter(continent == "Africa")
gap_africa
```




## 🚨 Your turn 🌡️ Climate change 🌡️ 🚨


```{r}
climate %>% 
  sample_n(5) %>%
  select(country, year, population, co2) |> 
  kbl(caption = "Sample from climate dataset", digits = 2)
```



## 🚨 Your turn 🌡️ Climate change 🌡️ 🚨


Using `climate`, make the following two plots looking **only** at the United States and China:


1. A grouped time-series of `co2` emissions over time (separate country by color)


2. A grouped time-series of `co2` emissions **per capita** over time (separate country by color)


3. Who's to "blame" for climate change? And where should we focus environmental efforts?


```{r}
countdown::countdown(minutes = 10L)
```




# Creating categories {.center background-color="`r full`"}


## Creating categories

. . .

Sometimes we want to create **categorical variables** out of continuous ones

. . .

Why? Categories are sometimes clearer: this city is "high crime", this city is "low crime"

. . .

Sometimes all that matters is some outcome: who won the election?



## Who won the county?

```{r}
small_elections =
  elections %>%
  select(name, state, per_gop_2020, per_dem_2020) 

small_elections |> 
  sample_n(10) |> 
  kbl(digits = 2, caption = "sample from elections dataset")
```


## Creating categories


. . .

We can use `case_when()` in conjunction with `mutate()` to create categorical variables

. . .

Like `filter()`, `case_when()` also relies on logical operators


. . .

start by making new variable with `mutate()`


```{r, echo = TRUE, eval = TRUE}
small_elections |> 
  mutate()
```



::: {.notes}
How would you identify who won based on this?
:::


## Who won the county?


The general formula: `case_when(CONDITION ~ LABEL)`


```{r, echo = TRUE}
small_elections |> 
  mutate(who_won = case_when(per_gop_2020 > per_dem_2020 ~ "Republicans"))
```


""Republicans" will be assigned to the `who_won` variable if `per_gop_2020` is greater than `per_dem_2020`"


::: {.notes}
point out the NA
:::


## Who won the county?


The general formula: `case_when(CONDITION ~ LABEL)`


```{r, echo = TRUE}
small_elections |> 
  mutate(who_won = case_when(per_gop_2020 > per_dem_2020 ~ "Republicans",
                             per_dem_2020 > per_gop_2020 ~ "Democrats"))
```



""Republicans" will be assigned to the `who_won` variable if `per_gop_2020` is greater than `per_dem_2020`. "Democrats" will be assigned if `per_dem_2020` is greater than `per_gop_2020`". 


::: {.notes}
How would I add condition for tie?
:::


## Tradeoff: clarity vs. complexity

Turning continuous variables into categories can make the "big picture" clearer

. . .

How many counties did each party win?

```{r, echo = FALSE}
small_elections |> 
  mutate(who_won = case_when(per_gop_2020 > per_dem_2020 ~ "Republicans",
                             per_dem_2020 > per_gop_2020 ~ "Democrats")) |> 
  group_by(who_won) |> 
  tally() |> 
  mutate(percentage = n / sum(n) * 100) |>
  kbl(caption = "Who won the county?")
```



## Tradeoff: clarity vs. complexity


But we lose **complexity**: how much did each party win **by**?


```{r}
small_elections |> 
  mutate(margin = per_gop_2020 - per_dem_2020) |> 
  ggplot(aes(x = margin, fill = margin >= 0)) + 
  geom_histogram(binwidth = .05, color = "white") + 
  labs(x = "GOP margin of victory\n(per_gop_2020 - per_dem_2020)", 
       y = NULL) + 
  geom_vline(xintercept = 0, color = red, size = 1)
```


## OK but by how much? {visibility="hidden"}


Our categories can be more complex, for instance the **win margin**

. . .

Step 1: calculate the win **margin**

```{r, echo = TRUE}
small_elections |> 
  mutate(margin = per_gop_2020 - per_dem_2020)
```



## OK but by how much? {visibility="hidden"}


Step 2: add the categories

```{r, echo = TRUE}
small_elections |> 
  mutate(margin = per_gop_2020 - per_dem_2020) |> 
  mutate(who_won = case_when(margin > 0 & margin < .1 ~ "R < 10"))
```



## OK but by how much? {visibility="hidden"}


Step 3: keep adding categories

```{r, echo = TRUE}
small_elections |> 
  mutate(margin = per_gop_2020 - per_dem_2020) |> 
  mutate(who_won = case_when(margin > 0 & margin < .1 ~ "R < 10",
                             margin >= .1 & margin < .2 ~ "R + 10"))
```

. . . 

And so on...


## 🚨 Your turn 🚨

Using the `elections` dataset:


1. Create a variable that tells you what happened in the 2016 election in each county. The variable should incorporate four possibilities: 

    1) DEMS won in 2012 and in 2016 ("true blue")
    
    2) REPS won in 2012 and in 2016 ("true red")
    
    3) the county flipped from blue to red ("blue to red")
    
    4) the county flipped from red to blue ("red to blue")



```{r}
countdown::countdown(minutes = 15L)
```
